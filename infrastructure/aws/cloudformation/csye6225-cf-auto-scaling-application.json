{  
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"Cloud Formation Template - CSYE6225 - Creating EC2 instance , Security Groups and Ingress Rules",
  "Parameters":{  
     "EC2Name":{  
        "Type":"String"
     },
     "EC2SecurityGroup":{  
        "Type":"String"
     },
     "EC2InstanceType":{  
        "Type":"String"
     },
     "SubnetId1":{  
        "Type":"String"
     },
     "VpcId":{  
        "Type":"String"
     },
     "EC2VolumeSize":{  
        "Type":"String"
     },
     "EC2VolumeType":{  
        "Type":"String"
     },
     "AMIImage":{  
        "Type":"String"
     },
     "DynamoDBName":{  
        "Type":"String"
     },
     "BucketName":{  
        "Type":"String"
     },
     "MasterUsername":{  
        "Type":"String"
     },
     "MasterUserPwd":{  
        "Type":"String"
     },
     "DBName":{  
        "Type":"String"
     },
     "DBInstanceClass":{  
        "Type":"String"
     },
     "DBInstanceIdentifier":{  
        "Type":"String"
     },
     "DBEngine":{  
        "Type":"String"
     },
     "SubnetId2":{  
        "Type":"String"
     },
     "SubnetId3":{  
        "Type":"String"
     },
     "RDSSecurityGroup":{  
        "Type":"String"
     },
     "EC2RoleName":{  
        "Type":"String"
     },
     "SNSTopicArn":{  
        "Type":"String"
     },
     "LambdaRoleArn":{  
        "Type":"String"
     },
     "AssociatePublicIpAddress":{  
        "Type":"String"
     },
     "Cooldown":{  
        "Type":"Number"
     },
     "LaunchConfigurationName":{  
        "Type":"String"
     },
     "MinSize":{  
        "Type":"Number"
     },
     "MaxSize":{  
        "Type":"Number"
     },
     "DesiredCapacity":{  
        "Type":"Number"
     },
     "CertificateArn":{  
        "Type":"String"
     },
     "CodeDeployServiceRoleArn":{  
        "Type":"String"
     },
     "DNS":{  
        "Type":"String"
     },
     "EC2Key":{  
        "Type":"String"
     },
     "CodeDeployApplicationName":{  
        "Type":"String"
     }
  },
  "Resources":{  
     "ourLaunchConfig":{  
        "Type":"AWS::AutoScaling::LaunchConfiguration",
        "Properties":{  
           "AssociatePublicIpAddress":{  
              "Ref":"AssociatePublicIpAddress"
           },
           "ImageId":{  
              "Ref":"AMIImage"
           },
           "InstanceType":{  
              "Ref":"EC2InstanceType"
           },
           "SecurityGroups":[  
              {  
                 "Ref":"EC2SecurityGroup"
              }
           ],
           "KeyName":{  
              "Ref":"EC2Key"
           },
           "UserData":{  
              "Fn::Base64":{  
                 "Fn::Join":[  
                    "\n",
                    [  
                       "#!/bin/bash -xe ",
                       "yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
                       "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
                       "chmod +x ./install \n",
                       "./install auto \n",
                       "service codedeploy-agent start \n",
                       "systemctl start ntpd",
                       "systemctl enable ntpd",
                       "groupadd tomcat",
                       "useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                       "cd /tmp",
                       "wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
                       "mkdir /opt/tomcat",
                       "tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                       "cd /opt/tomcat",
                       "chgrp -R tomcat /opt/tomcat",
                       "chmod -R g+r conf",
                       "chmod g+x conf",
                       "chown -R tomcat webapps/ work/ temp/ logs/",
                       "cd /usr/lib/systemd/system",
                       "touch tomcat.service",
                       "echo '[Unit]' > tomcat.service",
                       "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                       "echo 'After=syslog.target network.target' >> tomcat.service",
                       "echo '[Service]' >> tomcat.service",
                       "echo 'Type=forking' >> tomcat.service",
                       "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                       "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                       "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                       "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                       "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                       "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true\"' >> tomcat.service",
                       "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                       "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                       "echo 'User=tomcat' >> tomcat.service",
                       "echo 'Group=tomcat' >> tomcat.service",
                       "echo 'UMask=0007' >> tomcat.service",
                       "echo 'RestartSec=10' >> tomcat.service",
                       "echo 'Restart=always' >> tomcat.service",
                       "echo '[Install]' >> tomcat.service",
                       "echo 'WantedBy=multi-user.target' >> tomcat.service",
                       "systemctl daemon-reload",
                       "#systemctl start cloudwatch.service",
                       "#systemctl enable cloudwatch.service",
                       "systemctl enable tomcat.service",
                       "systemctl start tomcat.service",
                       "sudo touch /opt/cloudwatch-config.json",
                       "cd ../../../../..",
                       "cd /opt",
                       "#sudo echo '{' > cloudwatch-config.json",
                       "sudo echo '{\"agent\":{' >> cloudwatch-config.json",
                       "sudo echo '\"metrics_collection_interval\":10,' >> cloudwatch-config.json",
                       "sudo echo '\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\"' >> cloudwatch-config.json",
                       "sudo echo '},' >> cloudwatch-config.json",
                       "sudo echo '\"logs\": {\"logs_collected\": {\"files\": {\"collect_list\": [{\"file_path\": \"/opt/tomcat/logs/catalina.out\",\"log_group_name\": \"csye6225_fall2018\",\"log_stream_name\": \"webapp\"}]}},\"log_stream_name\": \"cloudwatch_log_stream\"}, \"metrics\":{ \"metrics_collected\":{ \"statsd\":{ \"service_address\":\":8125\", \"metrics_collection_interval\":10, \"metrics_aggregation_interval\":0 }}}}' >> cloudwatch-config.json",
                       "cd ..",
                       "sudo wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
                       "sudo rpm -U ./amazon-cloudwatch-agent.rpm",
                       "sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s",
                       "cd ../../../../..",
                       "sudo wget https://s3.amazonaws.com/configfileforcloudwatch/amazon-cloudwatch-agent.service",
                       "sudo cp amazon-cloudwatch-agent.service /usr/lib/systemd/system/",
                       "sudo systemctl enable amazon-cloudwatch-agent.service",
                       "sudo systemctl start amazon-cloudwatch-agent.service",
                       "sudo systemctl stop amazon-cloudwatch-agent.service",
                       "sudo systemctl restart amazon-cloudwatch-agent.service",
                       "cd /opt/tomcat",
                       "sudo touch bin/setenv.sh",
                       "sudo chmod 777 bin/setenv.sh",
                       "sudo echo 'export SPRING_PROFILES_ACTIVE=aws' >> bin/setenv.sh \n",
                       {  
                          "Fn::Join":[  
                             "",
                             [  
                                "sudo echo 'export URL=jdbc:postgresql://",
                                {  
                                   "Fn::GetAtt":[  
                                      "ourRDSInstance",
                                      "Endpoint.Address"
                                   ]
                                },
                                ":5432/",
                                {  
                                   "Ref":"DBName"
                                },
                                "'>> bin/setenv.sh \n"
                             ]
                          ]
                       },
                       {  
                          "Fn::Join":[  
                             "",
                             [  
                                "sudo echo 'export USERNAME=",
                                {  
                                   "Ref":"MasterUsername"
                                },
                                "' >> bin/setenv.sh"
                             ]
                          ]
                       },
                       {  
                          "Fn::Join":[  
                             "",
                             [  
                                "sudo echo 'export PASSWORD=",
                                {  
                                   "Ref":"MasterUserPwd"
                                },
                                "'>> bin/setenv.sh"
                             ]
                          ]
                       },
                       {  
                          "Fn::Join":[  
                             "",
                             [  
                                "sudo echo 'export BUCKET_NAME=",
                                {  
                                   "Ref":"BucketName"
                                },
                                "'>> bin/setenv.sh"
                             ]
                          ]
                       },
                       {  
                          "Fn::Join":[  
                             "",
                             [  
                                "sudo echo 'export BUCKET_NAME=",
                                {  
                                   "Ref":"SNSTopicArn"
                                },
                                "'>> bin/setenv.sh"
                             ]
                          ]
                       },
                       "systemctl start tomcat.service"
                    ]
                 ]
              }
           },
           "BlockDeviceMappings":[  
              {  
                 "DeviceName":"/dev/sda1",
                 "Ebs":{  
                    "DeleteOnTermination":true,
                    "VolumeSize":{  
                       "Ref":"EC2VolumeSize"
                    },
                    "VolumeType":{  
                       "Ref":"EC2VolumeType"
                    }
                 }
              }
           ],
           "IamInstanceProfile":{  
              "Ref":"ourIAMInstanceProfile"
           }
        }
     },
     "WebServerGroup":{  
        "Type":"AWS::AutoScaling::AutoScalingGroup",
        "Properties":{  
           "Tags":[  
              {  
                 "Key":"Name",
                 "Value":"csye6225",
                 "PropagateAtLaunch":true
              }
           ],
           "VPCZoneIdentifier":[  
              {  
                 "Ref":"SubnetId1"
              },
              {  
                 "Ref":"SubnetId2"
              },
              {  
                 "Ref":"SubnetId3"
              }
           ],
           "LaunchConfigurationName":{  
              "Ref":"ourLaunchConfig"
           },
           "MinSize":{  
              "Ref":"MinSize"
           },
           "MaxSize":{  
              "Ref":"MaxSize"
           },
           "DesiredCapacity":{  
              "Ref":"DesiredCapacity"
           },
           "Cooldown":{  
              "Ref":"Cooldown"
           },
           "TargetGroupARNs":[  
              {  
                 "Ref":"ourTargetGroup"
              }
           ]
        },
        "DependsOn":[  
           "Listener",
           "ourLaunchConfig"
        ]
     },
     "Listener":{  
        "Type":"AWS::ElasticLoadBalancingV2::Listener",
        "Properties":{  
           "DefaultActions":[  
              {  
                 "Type":"forward",
                 "TargetGroupArn":{  
                    "Ref":"ourTargetGroup"
                 }
              }
           ],
           "LoadBalancerArn":{  
              "Ref":"ourLoadBalancer"
           },
           "Port":"443",
           "Protocol":"HTTPS",
           "Certificates":[  
              {  
                 "CertificateArn":{  
                    "Ref":"CertificateArn"
                 }
              }
           ]
        }
     },
     "ourTargetGroup":{  
        "Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties":{  
           "HealthCheckIntervalSeconds":40,
           "HealthCheckTimeoutSeconds":30,
           "Protocol":"HTTP",
           "HealthCheckProtocol":"HTTP",
           "HealthCheckPort":"8080",
           "TargetGroupAttributes":[  
              {  
                 "Key":"deregistration_delay.timeout_seconds",
                 "Value":"20"
              }
           ],
           "Port":8080,
           "VpcId":{  
              "Ref":"VpcId"
           },
           "Tags":[  
              {  
                 "Key":"Name",
                 "Value":"csye6225"
              }
           ]
        }
     },
     "ourLoadBalancer":{  
        "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties":{  
           "Name":"csye6225LoadBalancer",
           "Scheme":"internet-facing",
           "IpAddressType":"ipv4",
           "Subnets":[  
              {  
                 "Ref":"SubnetId1"
              },
              {  
                 "Ref":"SubnetId2"
              },
              {  
                 "Ref":"SubnetId3"
              }
           ],
           "Type":"application",
           "SecurityGroups":[  
              {  
                 "Fn::GetAtt":[  
                    "LoadBalancerSecurityGroup",
                    "GroupId"
                 ]
              }
           ]
        }
     },
     "LoadBalancerSecurityGroup":{  
        "Type":"AWS::EC2::SecurityGroup",
        "Properties":{  
           "GroupDescription":"Load Balancer Security Group",
           "GroupName":"LoadBalancerGroupSecurity",
           "VpcId":{  
              "Ref":"VpcId"
           },
           "SecurityGroupIngress":[  
              {  
                 "IpProtocol":"tcp",
                 "FromPort":"443",
                 "ToPort":"443",
                 "CidrIp":"0.0.0.0/0"
              }
           ],
           "SecurityGroupEgress":[  
              {  
                 "IpProtocol":"tcp",
                 "FromPort":"8080",
                 "ToPort":"8080",
                 "DestinationSecurityGroupId":{  
                    "Ref":"EC2SecurityGroup"
                 }
              }
           ]
        }
     },
     "ourIAMInstanceProfile":{  
        "Type":"AWS::IAM::InstanceProfile",
        "Properties":{  
           "Path":"/",
           "Roles":[  
              {  
                 "Ref":"EC2RoleName"
              }
           ]
        }
     },
     "ourDynamoTable":{  
        "Type":"AWS::DynamoDB::Table",
        "Properties":{  
           "KeySchema":[  
              {  
                 "AttributeName":"id",
                 "KeyType":"HASH"
              }
           ],
           "AttributeDefinitions":[  
              {  
                 "AttributeName":"id",
                 "AttributeType":"S"
              }
           ],
           "TableName":{  
              "Ref":"DynamoDBName"
           },
           "ProvisionedThroughput":{  
              "ReadCapacityUnits":"5",
              "WriteCapacityUnits":"5"
           }
        }
     },
     "ourS3Bucket":{  
        "Type":"AWS::S3::Bucket",
        "Description":"S3 Bucket to store attachment files",
        "Properties":{  
           "AccessControl":"Private",
           "BucketName":{  
              "Ref":"BucketName"
           }
        }
     },
     "ourRDSDBSubnet":{  
        "Type":"AWS::RDS::DBSubnetGroup",
        "Properties":{  
           "DBSubnetGroupDescription":"Subnet Group fro RDS Instance",
           "SubnetIds":[  
              {  
                 "Ref":"SubnetId2"
              },
              {  
                 "Ref":"SubnetId3"
              }
           ]
        }
     },
     "ourRDSInstance":{  
        "Type":"AWS::RDS::DBInstance",
        "Properties":{  
           "AllocatedStorage":"10",
           "MasterUsername":{  
              "Ref":"MasterUsername"
           },
           "MasterUserPassword":{  
              "Ref":"MasterUserPwd"
           },
           "MultiAZ":false,
           "PubliclyAccessible":false,
           "DBName":{  
              "Ref":"DBName"
           },
           "DBInstanceClass":{  
              "Ref":"DBInstanceClass"
           },
           "DBInstanceIdentifier":{  
              "Ref":"DBInstanceIdentifier"
           },
           "Engine":{  
              "Ref":"DBEngine"
           },
           "DBSubnetGroupName":{  
              "Ref":"ourRDSDBSubnet"
           },
           "VPCSecurityGroups":[  
              {  
                 "Ref":"RDSSecurityGroup"
              }
           ]
        }
     },
     "WebServerScaleUpPolicy":{  
        "Type":"AWS::AutoScaling::ScalingPolicy",
        "Properties":{  
           "AdjustmentType":"ChangeInCapacity",
           "AutoScalingGroupName":{  
              "Ref":"WebServerGroup"
           },
           "Cooldown":"60",
           "ScalingAdjustment":"1"
        }
     },
     "WebServerScaleDownPolicy":{  
        "Type":"AWS::AutoScaling::ScalingPolicy",
        "Properties":{  
           "AdjustmentType":"ChangeInCapacity",
           "AutoScalingGroupName":{  
              "Ref":"WebServerGroup"
           },
           "Cooldown":"60",
           "ScalingAdjustment":"-1"
        }
     },
     "CPUAlarmHigh":{  
        "Type":"AWS::CloudWatch::Alarm",
        "Properties":{  
           "AlarmDescription":"Scale-up if CPU > 10% for 10 minutes",
           "MetricName":"CPUUtilization",
           "Namespace":"AWS/EC2",
           "Statistic":"Average",
           "Period":"300",
           "EvaluationPeriods":"2",
           "Threshold":"10",
           "AlarmActions":[  
              {  
                 "Ref":"WebServerScaleUpPolicy"
              }
           ],
           "Dimensions":[  
              {  
                 "Name":"AutoScalingGroupName",
                 "Value":{  
                    "Ref":"WebServerGroup"
                 }
              }
           ],
           "ComparisonOperator":"GreaterThanThreshold"
        }
     },
     "CPUAlarmLow":{  
        "Type":"AWS::CloudWatch::Alarm",
        "Properties":{  
           "AlarmDescription":"Scale-down if CPU < 5% for 10 minutes",
           "MetricName":"CPUUtilization",
           "Namespace":"AWS/EC2",
           "Statistic":"Average",
           "Period":"300",
           "EvaluationPeriods":"2",
           "Threshold":"8",
           "AlarmActions":[  
              {  
                 "Ref":"WebServerScaleDownPolicy"
              }
           ],
           "Dimensions":[  
              {  
                 "Name":"AutoScalingGroupName",
                 "Value":{  
                    "Ref":"WebServerGroup"
                 }
              }
           ],
           "ComparisonOperator":"LessThanThreshold"
        }
     },
     "Route53RecordSetA":{  
        "Type":"AWS::Route53::RecordSet",
        "Properties":{  
           "AliasTarget":{  
              "DNSName":{  
                 "Fn::GetAtt":[  
                    "ourLoadBalancer",
                    "DNSName"
                 ]
              },
              "EvaluateTargetHealth":"true",
              "HostedZoneId":{  
                 "Fn::GetAtt":[  
                    "ourLoadBalancer",
                    "CanonicalHostedZoneID"
                 ]
              }
           },
           "HostedZoneName":{  
              "Fn::Join":[  
                 "",
                 [  
                    {  
                       "Ref":"DNS"
                    },
                    "."
                 ]
              ]
           },
           "Comment":"DNS name for my instance.",
           "Name":{  
              "Fn::Join":[  
                 "",
                 [  
                    {  
                       "Ref":"DNS"
                    },
                    "."
                 ]
              ]
           },
           "Type":"A"
        }
     },
     "CodeDeployApplication":{  
        "Type":"AWS::CodeDeploy::Application",
        "Properties":{  
           "ApplicationName":{  
              "Ref":"CodeDeployApplicationName"
           },
           "ComputePlatform":"Server"
        }
     },
     "ourCodeDeploymentGroup":{  
        "Type":"AWS::CodeDeploy::DeploymentGroup",
        "Properties":{  
           "ApplicationName":{  
              "Ref":"CodeDeployApplicationName"
           },
           "DeploymentGroupName":{  
              "Ref":"CodeDeployApplicationName"
           },
           "Ec2TagFilters":[  
              {  
                 "Key":"Name",
                 "Value":"csye6225-ec2",
                 "Type":"KEY_AND_VALUE"
              }
           ],
           "AutoScalingGroups":[  
              {  
                 "Ref":"WebServerGroup"
              }
           ],
           "ServiceRoleArn":{  
              "Ref":"CodeDeployServiceRoleArn"
           },
           "DeploymentStyle":{  
              "DeploymentType":"IN_PLACE",
              "DeploymentOption":"WITHOUT_TRAFFIC_CONTROL"
           }
        }
     }
  },
  "Outputs":{  
     "URL":{  
        "Description":"The URL of the website",
        "Value":{  
           "Fn::Join":[  
              "",
              [  
                 "http://",
                 {  
                    "Fn::GetAtt":[  
                       "ourLoadBalancer",
                       "DNSName"
                    ]
                 }
              ]
           ]
        }
     },
     "LoadBalancerArn": {
      "Description": "LoadBalancer Arn",
      "Value": { "Ref": "ourLoadBalancer"},
      "Export" : { "Name" : "LoadBalancerArn" }
    }
  }
}