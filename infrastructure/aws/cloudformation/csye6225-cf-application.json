{
	"AWSTemplateFormatVersion":"2010-09-09",
	"Description":"Cloud Formation Template - CSYE6225 - Creating EC2 instance , Security Groups and Ingress Rules",
	"Parameters":{
		"EC2Name":{
			"Type":"String"
		},
		"EC2SecurityGroup":{
			"Type":"String"
		},
		"SubnetId1":{
			"Type":"String"
		},
		"VpcId":{
			"Type":"String"
		},
		"EC2VolumeSize":{
			"Type":"String"
		},
		"EC2VolumeType":{
			"Type":"String"
		},
		"AMIImage":{
			"Type":"String"
		},
		"DynamoDBName":{
			"Type":"String"
		},
		"BucketName":{
			"Type":"String"
		},
		"MasterUsername":{
			"Type":"String"
		},
		"MasterUserPwd":{
			"Type":"String"
		},
		"DBName":{
			"Type":"String"
		},
		"DBInstanceClass":{
			"Type":"String"
		},
		"DBInstanceIdentifier":{
			"Type":"String"
		},
		"DBEngine":{
			"Type":"String"
		},
		"SubnetId2":{
			"Type":"String"
		},
		"SubnetId3":{
			"Type":"String"
		},
		"RDSSecurityGroup":{
			"Type":"String"
		},
		"EC2RoleName":{
			"Type":"String"
		},
		"EC2Key":{
			"Type":"String"
		},
		"SNSTopicArn":{  
			"Type":"String"
		}
	},
	"Resources":{
		"ourEC2Instance":{
			"Type":"AWS::EC2::Instance",
			"Properties":{
				"InstanceType":"t2.micro",
				"DisableApiTermination":true,
				"KeyName":{"Ref": "EC2Key"}, 
				"ImageId":{
					"Ref":"AMIImage"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n",
							[
								"#!/bin/bash -xe ",
								"yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
								"wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
								"chmod +x ./install \n",
								"./install auto \n",
								"service codedeploy-agent start \n",
								"systemctl start ntpd",
								"systemctl enable ntpd",
								"groupadd tomcat",
								"useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
								"cd /tmp",
								"wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
								"mkdir /opt/tomcat",
								"tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
								"cd /opt/tomcat",
								"chgrp -R tomcat /opt/tomcat",
								"chmod -R g+r conf",
								"chmod g+x conf",
								"chown -R tomcat webapps/ work/ temp/ logs/",
								"cd /usr/lib/systemd/system",
								"touch tomcat.service",
								"echo '[Unit]' > tomcat.service",
								"echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
								"echo 'After=syslog.target network.target' >> tomcat.service",
								"echo '[Service]' >> tomcat.service",
								"echo 'Type=forking' >> tomcat.service",
								"echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
								"echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
								"echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
								"echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
								"echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
								"echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true\"' >> tomcat.service",
								"echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
								"echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
								"echo 'User=tomcat' >> tomcat.service",
								"echo 'Group=tomcat' >> tomcat.service",
								"echo 'UMask=0007' >> tomcat.service",
								"echo 'RestartSec=10' >> tomcat.service",
								"echo 'Restart=always' >> tomcat.service",
								"echo '[Install]' >> tomcat.service",
								"echo 'WantedBy=multi-user.target' >> tomcat.service",
								"systemctl daemon-reload",
								"#systemctl start cloudwatch.service",
								"#systemctl enable cloudwatch.service",
								"systemctl enable tomcat.service",
								"systemctl start tomcat.service",
								
								"cd /opt/tomcat",

								"sudo touch bin/setenv.sh",
                          		"sudo chmod 777 bin/setenv.sh",
								
								"sudo echo 'export SPRING_PROFILES_ACTIVE=aws' >> bin/setenv.sh \n",
								{ "Fn::Join":["", ["sudo echo 'export URL=jdbc:postgresql://",
									  { "Fn::GetAtt": ["ourRDSInstance", "Endpoint.Address"]},
									  ":5432/",
									  {	"Ref": "DBName"},
									  "'>> bin/setenv.sh \n"
									]
								  ]
								},
								{"Fn::Join": ["",["sudo echo 'export USERNAME=",{ "Ref": "MasterUsername"}, "' >> bin/setenv.sh"]]},
								{ "Fn::Join":["",["sudo echo 'export PASSWORD=",{"Ref" : "MasterUserPwd"}, "'>> bin/setenv.sh"]]},
								{ "Fn::Join":["",["sudo echo 'export BUCKET_NAME=",{"Ref" : "BucketName"}, "'>> bin/setenv.sh"]]},
								{ "Fn::Join":["",["sudo echo 'export BUCKET_NAME=",{"Ref" : "SNSTopicArn"}, "'>> bin/setenv.sh"]]},
								
								
								"systemctl start tomcat.service",
								"cd ~/opt",
								"sudo touch cloudwatch-config.json",
								"sudo echo '{' > cloudwatch-config.json",
								"sudo echo '{\"agent\":{' >> cloudwatch-config.json",
								"sudo echo '\"metrics_collection_interval\":10,' >> cloudwatch-config.json",
								"sudo echo '\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\"' >> cloudwatch-config.json",
								"sudo echo '},' >> cloudwatch-config.json",
								"sudo echo '\"logs\": {\"logs_collected\": {\"files\": {\"collect_list\": [{\"file_path\": \"/opt/tomcat/logs/catalina.out\",\"log_group_name\": \"csye6225_fall2018\",\"log_stream_name\": \"webapp\"}]}},\"log_stream_name\": \"cloudwatch_log_stream\"}, \"metrics\":{ \"metrics_collected\":{ \"statsd\":{ \"service_address\":\":8125\", \"metrics_collection_interval\":10, \"metrics_aggregation_interval\":0 }}}}' >> cloudwatch-config.json",
								"cd ..",
								"sudo wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
								"sudo rpm -U ./amazon-cloudwatch-agent.rpm",
								"sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s",     
								"cd ../../../../..",
								"sudo wget https://s3.amazonaws.com/configfileforcloudwatch/amazon-cloudwatch-agent.service",
								"sudo cp amazon-cloudwatch-agent.service /usr/lib/systemd/system/",
								"sudo systemctl enable amazon-cloudwatch-agent.service",
								"sudo systemctl start amazon-cloudwatch-agent.service",
								"sudo systemctl stop amazon-cloudwatch-agent.service",
								"sudo systemctl restart amazon-cloudwatch-agent.service"	
							]
						]
					}
				  },
				"BlockDeviceMappings":[
					{
						"DeviceName":"/dev/sda1",
						"Ebs":{
							"DeleteOnTermination": true,
							"VolumeSize":{
								"Ref":"EC2VolumeSize"
							},
							"VolumeType":{
								"Ref":"EC2VolumeType"
							}
						}
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Ref": "EC2Name"
					}
				}],
				"SecurityGroupIds":[
					{
						"Ref":"EC2SecurityGroup"
					}
				],
				"SubnetId":{
					"Ref":"SubnetId1"
				},
				"IamInstanceProfile":{
					"Ref":"ourIAMInstanceProfile"
				}
			}
		},
		"ourIAMInstanceProfile":{
			"Type":"AWS::IAM::InstanceProfile",
			"Properties":{
				"Path":"/",
				"Roles":[
					{
						"Ref":"EC2RoleName"
					}
				]
			}
		},
		"ourDynamoTable":{
			"Type":"AWS::DynamoDB::Table",
			"Properties":{
				"KeySchema":[
					{
						"AttributeName":"id",
						"KeyType":"HASH"
					}
				],
				"AttributeDefinitions":[
					{
						"AttributeName":"id",
						"AttributeType":"S"
					}
				],
				"TableName":{
					"Ref":"DynamoDBName"
				},
				"ProvisionedThroughput":{
					"ReadCapacityUnits":"5",
					"WriteCapacityUnits":"5"
				},
				"TimeToLiveSpecification":{
					"AttributeName": "ttl",
					"Enabled": true
				}
			}
		},
		"ourS3Bucket":{
			"Type":"AWS::S3::Bucket",
			"Description":"S3 Bucket to store attachment files",
			"Properties":{
				"BucketName":{
					"Ref":"BucketName"
				},
				"AccessControl": "Private"
			}
		},

		"ourS3BucketPolicy":{
			"Type" : "AWS::S3::BucketPolicy",
			"Properties" : {
			  "Bucket" : {"Ref": "ourS3Bucket"},
			  "PolicyDocument": {
				"Statement": [{
				  "Action":["s3:*"],
				  "Effect":"Allow",
				  "Resource": [{ "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "BucketName" } , "/*" ]]},
							   { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "BucketName" }]]}],
				  "Principal":"*",
				  "Condition":{
					"StringLike":{
					  "aws:Referer":[
						"*"
					  ]
					}
				  }
				}]
			  }
			}
		  },

		"ourRDSDBSubnet":{
			"Type":"AWS::RDS::DBSubnetGroup",
			"Properties":{
				"DBSubnetGroupDescription":"Subnet Group fro RDS Instance",
				"SubnetIds":[
					{
						"Ref":"SubnetId2"
					},
					{
						"Ref":"SubnetId3"
					}
				]
			}
		},
		"ourRDSInstance":{
			"Type":"AWS::RDS::DBInstance",
			"Properties":{
				"AllocatedStorage":"100",
				"MasterUsername":{
					"Ref":"MasterUsername"
				},
				"MasterUserPassword":{
					"Ref":"MasterUserPwd"
				},
				"MultiAZ": false,
				"PubliclyAccessible": false,
				"DBName":{
					"Ref":"DBName"
				},
				"DBInstanceClass":{
					"Ref":"DBInstanceClass"
				},
				"DBInstanceIdentifier":{
					"Ref":"DBInstanceIdentifier"
				},
				"Engine":{
					"Ref":"DBEngine"
				},
				"DBSubnetGroupName":{
					"Ref":"ourRDSDBSubnet"
				},
				"VPCSecurityGroups":[
					{
						"Ref":"RDSSecurityGroup"
					}
				]
			}
			}
   },
   "Outputs":{
      "InstanceId":{
         "Description":"InstanceId of the newly created EC2 instance",
         "Value":{
            "Ref":"ourEC2Instance"
         }
      },
      "AZ":{
         "Description":"Availability Zone of the newly created EC2 instance",
         "Value":{
            "Fn::GetAtt":[
               "ourEC2Instance",
               "AvailabilityZone"
            ]
         }
      },
      "PublicDNS":{
         "Description":"Public DNSName of the newly created EC2 instance",
         "Value":{
            "Fn::GetAtt":[
               "ourEC2Instance",
               "PublicDnsName"
            ]
         }
      },
      "PublicIP":{
         "Description":"Public IP address of the newly created EC2 instance",
         "Value":{
            "Fn::GetAtt":[
               "ourEC2Instance",
               "PublicIp"
            ]
         }
      }
   }
}